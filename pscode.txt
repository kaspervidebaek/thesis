costfunction(A, B) -> int?
create(A, B) -> int?
unorderedtypes() -> (type, costfunction, recreationfunction)

file merge(base, left, right)
	if(nodes are unordered)
		unorderedmatch(base, left, right)
	else if(nodes are ordered)
		orderedmatch(base, left, right);

file unorderedmerge(base, left, right)
	var bl = match B and Ls children given cost-function
	var br = match B and Rs children given cost-function
	var zip = match bl and br on same base object.

	var members = [];

	foreach(match in zip)
		if(match exists in all)
			member.add(m, merge(base, left, right));
		if(match was inserted in B)
			member.add(m, m.B);
		if(match was inserted in A)
			member.add(m, m.A);
	
	members = mergeorder(l, b, r, members);

	return recreate(b, l, r, members);


file orderedmerge(base, left, right)
	run diff3 algorithm on the source text of base, left, right
	if a conflict happens, do a three-way matching-tree matching on the trees. instead.
	use this three-way match to reconstruct a new tree.

Theory
- Automatic merging
- Syntax Trees in version control
- Tree differencing and merging

Discussions
- Supporting several different lagnguages
- Tree merging. How is it applicable.

Proposed Solution
- Interface
- Algorithmic overview
		

- Running times of the algorithm

Implementation
- 
- Tree matching
- 

-- Implementation details
--- Three way cost matching
--- Node similarity measures
--- Reordering outputted class members



 

A node has:
Properties (modifiers, type parameters, return type, parameters, und so weider)
Nodes: Things that are absolutely dependent on this thing to exist.
Identifiers: Ting der bruges til at Matche om to noder er ens. (Type, navn, måske properties)

In lists, all the children are 
